// RadialBlur

//@Begin_vertex
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 position;

uniform mat3 projectionMatrix;
uniform mat3 transformMatrix;
uniform mat3 objectMatrix;
uniform mat3 textureMatrix;

out vec2 textureCoordinate;

void main()
{
    vec3 pos = vec3(position, 1.0);
    textureCoordinate = (textureMatrix * pos).xy;
    gl_Position = vec4(projectionMatrix * transformMatrix * objectMatrix * pos, 1.0);
}
//@End
//@Begin_fragment
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 textureCoordinate;

uniform int absolute;
uniform float x;
uniform float y;
uniform float sampleDist;
uniform float sampleStrength;

uniform sampler2D imgTexture;


uniform vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

const float samples[] = float[](-0.08,
                                -0.05,
                                -0.03,
                                -0.02,
                                -0.01,
                                 0.01,
                                 0.02,
                                 0.03,
                                 0.05,
                                 0.08);

out vec4 fragColor;

void main(void)
{
	vec2 relative = vec2(1.0, 1.0);

	vec2 dir = vec2(x,y)*relative-textureCoordinate;
	float dist = sqrt(dir.x*dir.x+dir.y*dir.y);
	dir /= dist;

    vec4 color = texture(imgTexture, textureCoordinate);

	color *= vec4(color.r * color.a, color.g * color.a, color.b * color.a, color.a);

    vec4 sum = color;

    for(int i =0; i<10 ; i++)
    {
        sum += texture(imgTexture, textureCoordinate + dir*samples[i]*sampleDist*relative);
    }
    sum /= 11.0;

    float t = dist*sampleStrength;
    t = clamp(t,0.0,1.0);


    color = mix(color,sum,t);

    color *= blendColor;

    fragColor = color; //gl_FragColor
}
//@End
