// CS_GlowTotal

//@Begin_vertex
#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 textureCoordinate;

void main(void)
{
	textureCoordinate = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}
//@End
//@Begin_fragment
#ifdef GL_ES
 precision mediump float;
#endif
varying vec2 textureCoordinate;

uniform float fGlowPower;
uniform float fGlowStrenght;
uniform vec4 fGlowColor;
uniform float fContrast;

uniform sampler2D imgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;


void main(void)
{
	vec4 fOldColor;
	vec4 fBlurColor;
	float glowStrength = fGlowStrenght+0.5;

	vec4 color = texture2D(imgTexture, textureCoordinate);

	//color.rgb = color.rgb*(1.0-fContrast)+(1.0-color.rgb)*fContrast;
	color.rgb = color.rgb*(1.0+fContrast);

	fOldColor = color;

	vec4 TexT = texture2D(imgTexture, vec2(textureCoordinate.x, textureCoordinate.y - fGlowPower));
	vec4 TexTL = texture2D(imgTexture, vec2(textureCoordinate.x - fGlowPower, textureCoordinate.y - fGlowPower));
	vec4 TexL = texture2D(imgTexture, vec2(textureCoordinate.x - fGlowPower, textureCoordinate.y));
	vec4 TexBL = texture2D(imgTexture, vec2(textureCoordinate.x - fGlowPower, textureCoordinate.y + fGlowPower));
	vec4 TexB = texture2D(imgTexture, vec2(textureCoordinate.x, textureCoordinate.y + fGlowPower));
	vec4 TexBR = texture2D(imgTexture, vec2(textureCoordinate.x + fGlowPower, textureCoordinate.y + fGlowPower));
	vec4 TexR = texture2D(imgTexture, vec2(textureCoordinate.x + fGlowPower, textureCoordinate.y));
	vec4 TexTR = texture2D(imgTexture, vec2(textureCoordinate.x + fGlowPower, textureCoordinate.y - fGlowPower));

	fBlurColor = (color + TexT + TexTL + TexL + TexBL + TexB + TexBR + TexR + TexTR)/9.0;

	color.a = fBlurColor.a + fOldColor.a;
	color.rgb = fOldColor.rgb/2.0 + fBlurColor.rgb * glowStrength;

	if(fOldColor.a < 1.0 && fGlowPower > 0.0)
	{
		color.a = fBlurColor.a + fOldColor.a;
		color.rgb = fGlowColor.rgb*fGlowPower*100.0 * (1.0 - fOldColor.a) + fOldColor.rgb * (fOldColor.a);
	}
	else if( fOldColor.a < 1.0)
	{
		color.a = fOldColor.a;
	}

	color *= blendColor;

	gl_FragColor = color;

}
//@End