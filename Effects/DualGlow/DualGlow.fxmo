// DualGlow

//@Begin_vertex
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 position;

uniform mat3 projectionMatrix;
uniform mat3 transformMatrix;
uniform mat3 objectMatrix;
uniform mat3 textureMatrix;

out vec2 textureCoordinate;

void main()
{
    vec3 pos = vec3(position, 1.0);
    textureCoordinate = (textureMatrix * pos).xy;
    gl_Position = vec4(projectionMatrix * transformMatrix * objectMatrix * pos, 1.0);
}
//@End
//@Begin_fragment
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 textureCoordinate;

uniform float iRadius;
uniform float iExponent;
uniform float oAlpha;
uniform float oRadius;
uniform float oExponent;
uniform vec4 iColor;
uniform vec4 oColor;

const vec2 offsets[] = vec2[](vec2(-0.326212, -0.305805),
							vec2(-0.840144,  0.073580),
							vec2(-0.695914,  0.557137),
							vec2(-0.203345,  0.720716),
							vec2( 0.962340, -0.094983),
							vec2( 0.473434, -0.380026),
							vec2( 0.519456,  0.867022),
							vec2( 0.185461, -0.793124),
							vec2( 0.507431,  0.164425),
							vec2( 0.896420,  0.512458),
							vec2(-0.321940, -0.832615),
							vec2(-0.791559, -0.497705));

uniform sampler2D imgTexture;


uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

out vec4 fragColor;

void main(void)
{

	float glow;
	vec2 scaled;

	vec4 color = texture(imgTexture, textureCoordinate);

	//Inner glow
	scaled = vec2(iRadius, iRadius)/vec2(fPixelWidth, fPixelHeight);
	glow = color.a;
	for(int i=0;i<12;i++)
		glow += texture(imgTexture, textureCoordinate+scaled*offsets[i]).a;
	glow /= 13.0;

	//Blend between to glow color based on blurred alpha
	color.rgb = mix(iColor.rgb,color.rgb,pow(glow,iExponent));

	//Outer glow
	scaled = vec2(oRadius, oRadius)/vec2(fPixelWidth, fPixelHeight);
	glow = color.a;
	for(int i=0;i<12;i++)
		glow += texture(imgTexture, textureCoordinate+scaled*offsets[i]).a;
	glow /= 13.0;

	//Fill transparent areas with the glow color
	color.rgb = mix(oColor.rgb, color.rgb, color.a);
	color.a = max((1.0-pow(1.0-glow,oExponent))*oAlpha, color.a);
	//color *= vec4(color.r * color.a, color.g * color.a, color.b * color.a, color.a);

   color *= blendColor;

   fragColor = color; //gl_FragColor
}
//@End