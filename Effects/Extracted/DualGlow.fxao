// DualGlow

//@Begin_vertex
#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 textureCoordinate;

void main(void)
{
	textureCoordinate = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}
//@End
//@Begin_fragment
#ifdef GL_ES
 precision mediump float;
#endif
varying vec2 textureCoordinate;

uniform float iRadius;
uniform float iExponent;
uniform float oAlpha;
uniform float oRadius;
uniform float oExponent;
uniform vec4 iColor;
uniform vec4 oColor;

vec2 offsets[12];

uniform sampler2D imgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

void main(void)
{
	offsets[0] = vec2(-0.326212, -0.305805);
	offsets[1] = vec2(-0.840144,  0.073580);
	offsets[2] = vec2(-0.695914,  0.557137);
	offsets[3] = vec2(-0.203345,  0.720716);
	offsets[4] = vec2( 0.962340, -0.094983);
	offsets[5] = vec2( 0.473434, -0.380026);
	offsets[6] = vec2( 0.519456,  0.867022);
	offsets[7] = vec2( 0.185461, -0.793124);
	offsets[8] = vec2( 0.507431,  0.164425);
	offsets[9] = vec2( 0.896420,  0.512458);
	offsets[10] = vec2(-0.321940, -0.832615);
	offsets[11] = vec2(-0.791559, -0.497705);

	float glow;
	vec2 scaled;

	vec4 color = texture2D(imgTexture, textureCoordinate);

	//Inner glow
	scaled = vec2(iRadius, iRadius)/vec2(fPixelWidth, fPixelHeight);
	glow = color.a;
	for(int i=0;i<12;i++)
		glow += texture2D(imgTexture,textureCoordinate+scaled*offsets[i]).a;
	glow /= 13.0;

	//Blend between to glow color based on blurred alpha
	color.rgb = mix(iColor.rgb,color.rgb,pow(glow,iExponent));

	//Outer glow
	scaled = vec2(oRadius, oRadius)/vec2(fPixelWidth, fPixelHeight);
	glow = color.a;
	for(int i=0;i<12;i++)
		glow += texture2D(imgTexture,textureCoordinate+scaled*offsets[i]).a;
	glow /= 13.0;

	//Fill transparent areas with the glow color
	color.rgb = mix(oColor.rgb,color.rgb,color.a);
	color.a = max((1.0-pow(1.0-glow,oExponent))*oAlpha,color.a);
	//color *= vec4(color.r * color.a, color.g * color.a, color.b * color.a, color.a);

   color *= blendColor;
   gl_FragColor = color;
}
//@End