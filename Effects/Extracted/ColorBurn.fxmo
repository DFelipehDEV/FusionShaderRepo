// ColorBurn

//@Begin_vertex
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 position;

uniform mat3 projectionMatrix;
uniform mat3 transformMatrix;
uniform mat3 objectMatrix;
uniform mat3 textureMatrix;

out vec2 textureCoordinate;

void main()
{
    vec3 pos = vec3(position, 1.0);
    textureCoordinate = (textureMatrix * pos).xy;
    gl_Position = vec4(projectionMatrix * transformMatrix * objectMatrix * pos, 1.0);
}
//@End
//@Begin_fragment//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 textureCoordinate;

uniform float fC;
uniform float fP;
uniform float fX;
uniform float fY;
uniform float fPow;

uniform sampler2D imgTexture;

uniform vec4 blendColor;

const int iRem = 0;

out vec4 fragColor;

void main(void)
{
   vec4 color;
   //fC = 1.0f;
   //fP = 5.0f;
   //fX = 0.5f;
   //fY = 0.5f;
   //fPow = 1;
   fX = 1.0f-fX;
   fY = 1.0f-fY;
   //float dist = pow(fP,pow(sqrt(pow(fX-textureCoordinate.x,2.0f)+pow(fY-textureCoordinate.y,2.0f)),fPow));
   float dist = pow(fP,pow(sqrt(pow(fX-textureCoordinate.x,2.0f)+pow(fY-textureCoordinate.y,2.0f)),fPow));
   fC += (fP-1)*0.5f; //Adjust zoom automaticly
   fC *= 1.0f+(1.0f-dist);
   fC = max(0.0f,fC);
   textureCoordinate.x = textureCoordinate.x + fX*(fC-1.0f);
   textureCoordinate.y = textureCoordinate.y + fY*(fC-1.0f);
   color = texture(imgTexture, vec2(textureCoordinate.x/fC,textureCoordinate.y/fC));
   if(iRem == 1 && (textureCoordinate.x/fC < 0.0f || textureCoordinate.x/fC > 1.0f || textureCoordinate.y/fC < 0.0f || textureCoordinate.y/fC > 1.0f)) 
		color.a = 0;

	color *= blendColor;


	fragColor = color; //gl_FragColor
}
//@End