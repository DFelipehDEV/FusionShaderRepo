// Hole

//@Begin_vertex
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 position;

uniform mat3 projectionMatrix;
uniform mat3 transformMatrix;
uniform mat3 objectMatrix;
uniform mat3 textureMatrix;

out vec2 textureCoordinate;

void main()
{
    vec3 pos = vec3(position, 1.0);
    textureCoordinate = (textureMatrix * pos).xy;
    gl_Position = vec4(projectionMatrix * transformMatrix * objectMatrix * pos, 1.0);
}
//@End
//@Begin_fragment
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 textureCoordinate;


uniform float fD;
uniform float fE;
uniform float fX;
uniform float fY;
uniform float fC;
uniform float fRatio;
uniform int iInvert;
uniform int iH;
uniform int iV;

uniform sampler2D imgTexture;

uniform vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

out vec4 fragColor;

void main(void)
{

	vec4 color = texture(imgTexture, textureCoordinate);
    if(iH==0 || (iH==1 && textureCoordinate.x >fX) || (iH==2 && textureCoordinate.x <fX) ) {
    	if(iV==0 || (iV==1 && textureCoordinate.y >fY) || (iV==2 && textureCoordinate.y <fY) ) {
		    float a = pow(max(0.0,min(1.0,sqrt(pow(textureCoordinate.y-fY,2.0)/fRatio+pow(textureCoordinate.x-fX,2.0)*fRatio)/fD)),fE)*fC;
		    if(iInvert==1)
				color.a *= (1.0-a);
		    else
				color.a *= a;
		  }
    }

	color *= blendColor;


	fragColor = color; //gl_FragColor
}
//@End