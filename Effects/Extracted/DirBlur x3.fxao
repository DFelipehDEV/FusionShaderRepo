// DirBlur x3

//@Begin_vertex
#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 textureCoordinate;

void main(void)
{
	textureCoordinate = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}
//@End
//@Begin_fragment
#ifdef GL_ES
 precision mediump float;
#endif
varying vec2 textureCoordinate;

uniform float fCoeff;
uniform float fAngle;

uniform sampler2D imgTexture;
uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

void main(void)
{
	float rAngle = fAngle*0.0174532925;
	vec4 colorA = texture2D(imgTexture, vec2(textureCoordinate.x+cos(rAngle)*fCoeff,textureCoordinate.y+sin(rAngle)*fCoeff));
	vec4 colorB = texture2D(imgTexture, vec2(textureCoordinate.x-cos(rAngle)*fCoeff,textureCoordinate.y-sin(rAngle)*fCoeff));
	vec4 colorC = texture2D(imgTexture, vec2(textureCoordinate.x+cos(rAngle)*fCoeff*0.66,textureCoordinate.y+sin(rAngle)*fCoeff*0.66));
	vec4 colorD = texture2D(imgTexture, vec2(textureCoordinate.x-cos(rAngle)*fCoeff*0.66,textureCoordinate.y-sin(rAngle)*fCoeff*0.66));
	vec4 colorE = texture2D(imgTexture, vec2(textureCoordinate.x+cos(rAngle)*fCoeff*0.33,textureCoordinate.y+sin(rAngle)*fCoeff*0.33));
	vec4 colorF = texture2D(imgTexture, vec2(textureCoordinate.x-cos(rAngle)*fCoeff*0.33,textureCoordinate.y-sin(rAngle)*fCoeff*0.33));
	vec4 color  = texture2D(imgTexture, textureCoordinate);
	color = (color+colorA+colorB+colorC+colorD+colorE+colorF)/7.0;

	color *= blendColor;

	gl_FragColor = color;
}
//@End