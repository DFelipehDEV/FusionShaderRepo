// CS_Glow

//@Begin_vertex
#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 textureCoordinate;

void main(void)
{
	textureCoordinate = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}
//@End
//@Begin_fragment
#ifdef GL_ES
 precision mediump float;
#endif
varying vec2 textureCoordinate;

uniform float fGlowPower;
uniform vec4 fGlowColor;
uniform float fContrast;

uniform sampler2D imgTexture;
uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

void main(void)
{
	vec4 color = texture2D(imgTexture, textureCoordinate);
	vec4 oldColor = color;
	float contrast = -fContrast;
	color.rgb = color.rgb * (1.0 - contrast) + (1.0 - color.rgb) * contrast;

	if (color.a < 1.0) {

		vec4 TexT = texture2D(imgTexture, vec2(textureCoordinate.x, textureCoordinate.y - fGlowPower));
		vec4 TexTL = texture2D(imgTexture, vec2(textureCoordinate.x - fGlowPower, textureCoordinate.y - fGlowPower));
		vec4 TexL = texture2D(imgTexture, vec2(textureCoordinate.x - fGlowPower, textureCoordinate.y));
		vec4 TexBL = texture2D(imgTexture, vec2(textureCoordinate.x - fGlowPower, textureCoordinate.y + fGlowPower));
		vec4 TexB = texture2D(imgTexture, vec2(textureCoordinate.x, textureCoordinate.y + fGlowPower));
		vec4 TexBR = texture2D(imgTexture, vec2(textureCoordinate.x + fGlowPower, textureCoordinate.y + fGlowPower));
		vec4 TexR = texture2D(imgTexture, vec2(textureCoordinate.x + fGlowPower, textureCoordinate.y));
		vec4 TexTR = texture2D(imgTexture, vec2(textureCoordinate.x + fGlowPower, textureCoordinate.y - fGlowPower));

		color = vec4(color + TexT + TexTL + TexL + TexBL + TexB + TexBR + TexR + TexTR) / 9.0;
		color.a = color.a + oldColor.a;
		color.rgb = fGlowColor.rgb * (1.0 - oldColor.a) + oldColor.rgb * oldColor.a;
	}
	color *= blendColor;

	gl_FragColor = color;
}
//@End