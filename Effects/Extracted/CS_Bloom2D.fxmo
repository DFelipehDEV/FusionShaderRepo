// CS_Bloom2D

//@Begin_vertex
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 position;

uniform mat3 projectionMatrix;
uniform mat3 transformMatrix;
uniform mat3 objectMatrix;
uniform mat3 textureMatrix;

out vec2 textureCoordinate;

void main()
{
    vec3 pos = vec3(position, 1.0);
    textureCoordinate = (textureMatrix * pos).xy;
    gl_Position = vec4(projectionMatrix * transformMatrix * objectMatrix * pos, 1.0);
}
//@End
//@Begin_fragment
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 textureCoordinate;


uniform float fBloomPower;
uniform float fBloomStrenght;
uniform float fContrast;

uniform sampler2D imgTexture;

uniform lowp vec4 blendColor;

out vec4 fragColor;

void main(void)
{
	vec4 color = texture(imgTexture, textureCoordinate);
	vec4 fOldColor = color;
	vec4 fBlurColor;
	vec4 fTemp;
	float fOld;
	float fBlur;

	vec4 TexT = texture(imgTexture, vec2(textureCoordinate.x, textureCoordinate.y - fBloomPower));
	vec4 TexTL = texture(imgTexture, vec2(textureCoordinate.x - fBloomPower, textureCoordinate.y - fBloomPower));
	vec4 TexL = texture(imgTexture, vec2(textureCoordinate.x - fBloomPower, textureCoordinate.y));
	vec4 TexBL = texture(imgTexture, vec2(textureCoordinate.x - fBloomPower, textureCoordinate.y + fBloomPower));
	vec4 TexB = texture(imgTexture, vec2(textureCoordinate.x, textureCoordinate.y + fBloomPower));
	vec4 TexBR = texture(imgTexture, vec2(textureCoordinate.x + fBloomPower, textureCoordinate.y + fBloomPower));
	vec4 TexR = texture(imgTexture, vec2(textureCoordinate.x + fBloomPower, textureCoordinate.y));
	vec4 TexTR = texture(imgTexture, vec2(textureCoordinate.x + fBloomPower, textureCoordinate.y - fBloomPower));

	fBlurColor = (color+TexT+TexTL+TexL+TexBL+TexB+TexBR+TexR+TexTR) / 9.0;

	fTemp = fOldColor * vec4(0.299, 0.587, 0.114, 1.0);
	fOld = fTemp.r + fTemp.g + fTemp.b;

	fTemp = fBlurColor * vec4(0.299, 0.587, 0.114, 1.0);
	fBlur = fTemp.r + fTemp.g + fTemp.b;

	color.a=fOldColor.a;

	if(fBlur>fOld)
	{
		color.rgb=fOldColor.rgb*(1.0-fBloomStrenght)+fBlurColor.rgb*fBloomStrenght;
	}
	else
	{
		color.rgb=fOldColor.rgb;
	}
	color.rgb = color.rgb * (1.0 + fContrast);

	color *= blendColor;


	fragColor = color; //gl_FragColor
}
//@End