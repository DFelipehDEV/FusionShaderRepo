// CS_EdgeDetection

//@Begin_vertex
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 position;

uniform mat3 projectionMatrix;
uniform mat3 transformMatrix;
uniform mat3 objectMatrix;
uniform mat3 textureMatrix;

out vec2 textureCoordinate;

void main()
{
    vec3 pos = vec3(position, 1.0);
    textureCoordinate = (textureMatrix * pos).xy;
    gl_Position = vec4(projectionMatrix * transformMatrix * objectMatrix * pos, 1.0);
}
//@End
//@Begin_fragment
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 textureCoordinate;


uniform float fCoeffX;
uniform float fCoeffY;

uniform sampler2D imgTexture;

uniform lowp vec4 blendColor;

out vec4 fragColor;

void main(void)
{
	vec4 color = texture(imgTexture, textureCoordinate);

	vec4 c2 = texture(imgTexture, textureCoordinate + vec2(0.0,-fCoeffY));
	vec4 c4 = texture(imgTexture, textureCoordinate + vec2(-fCoeffX,0.0));
	vec4 c5 = texture(imgTexture, textureCoordinate + vec2(0.0,0.0));
	vec4 c6 = texture(imgTexture, textureCoordinate + vec2(fCoeffX,0.0));
	vec4 c8 = texture(imgTexture, textureCoordinate + vec2(0.0,fCoeffY));

	vec4 c0 = (-c2-c4+c5*4.0-c6-c8);

	if(length(c0) < 1.0)
		c0 = vec4(0.0,0.0,0.0,0.0);
	else
		c0 = vec4(1.0,1.0,1.0,0.0);

	color.rgb = c0.rgb;

	color *= blendColor;

	fragColor = color; //gl_FragColor

}
//@End