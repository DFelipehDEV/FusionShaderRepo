// CS_ColorizePartsWRGB

//@Begin_vertex
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 position;

uniform mat3 projectionMatrix;
uniform mat3 transformMatrix;
uniform mat3 objectMatrix;
uniform mat3 textureMatrix;

out vec2 textureCoordinate;

void main()
{
    vec3 pos = vec3(position, 1.0);
    textureCoordinate = (textureMatrix * pos).xy;
    gl_Position = vec4(projectionMatrix * transformMatrix * objectMatrix * pos, 1.0);
}
//@End
//@Begin_fragment
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 textureCoordinate;


//Tint color
uniform vec4 fW;
uniform vec4 fR;
uniform vec4 fG;
uniform vec4 fB;
uniform float fCoeff;


uniform sampler2D imgTexture;

uniform lowp vec4 blendColor;

out vec4 fragColor;

void main(void)
{
	vec4 color = texture(imgTexture, textureCoordinate);
	//Grey
	if((fW.r>0.0 || fW.g>0.0 || fW.b>0.0) &&
		color.r>color.g-fCoeff &&
		color.r<color.g+fCoeff &&
		color.r>color.b-fCoeff &&
		color.r<color.b+fCoeff)
	{
		color.rgb = color.rgb*fW.rgb;
	}
	//Red
	else if((fR.r>0.0 || fR.g>0.0 || fR.b>0.0) &&
		color.r>0.0 && color.g<fCoeff && color.b<fCoeff)
	{
		color.rgb = color.r*fR.rgb;
	}
	//Green
	else if((fG.r>0.0 || fG.g>0.0 || fG.b>0.0) &&
		color.g>0.0 &&	color.r<fCoeff && color.b<fCoeff)
	{
		color.rgb = color.g*fG.rgb;
	}
	//Blue
	else if((fB.r>0.0 || fB.g>0.0 || fB.b>0.0) &&
		color.b>0.0 &&	color.r<fCoeff && color.g<fCoeff)
	{
		color.rgb = color.b*fB.rgb;
	}

	color *= blendColor;


	fragColor = color; //gl_FragColor
}
//@End