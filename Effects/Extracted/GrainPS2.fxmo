// GrainPS2

//@Begin_vertex
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 position;

uniform mat3 projectionMatrix;
uniform mat3 transformMatrix;
uniform mat3 objectMatrix;
uniform mat3 textureMatrix;

out vec2 textureCoordinate;

void main()
{
    vec3 pos = vec3(position, 1.0);
    textureCoordinate = (textureMatrix * pos).xy;
    gl_Position = vec4(projectionMatrix * transformMatrix * objectMatrix * pos, 1.0);
}
//@End
//@Begin_fragment
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 textureCoordinate;


uniform float fSeed;
uniform float fStrength;
uniform float fAdvA;
uniform float fAdvB;
uniform float fAdvC;
uniform float fAdvD;
uniform float fAdvE;
uniform bool iR;
uniform bool iG;
uniform bool iB;
uniform bool iA;
uniform bool iInvert;

uniform sampler2D imgTexture;

uniform vec4 blendColor;


/* Random algorithm by Sylvain Lefebvre */

#define M_PI 3.14159265358979323846

float mccool_rand(vec2 ij)
{
  const vec4 a = vec4(pow(M_PI,4.0),exp(5.0),pow(13.0, M_PI / 2.0),sqrt(1997.0));
  vec4 result  = vec4(ij,ij);

  for(int i = 0; i < 3; i++)
  {
		result.x = fract(dot(result, a));
		result.y = fract(dot(result, a));
		result.z = fract(dot(result, a));
		result.w = fract(dot(result, a));
  }
  return float(result.xy);
}
out vec4 fragColor;

void main(void)
{

	vec4 color = texture(imgTexture, textureCoordinate);
	float rand = mccool_rand(textureCoordinate+fSeed)*fStrength;
	rand = iInvert ? 1.0-rand : rand;
	if(iR) color.r *= rand;
	if(iG) color.g *= rand;
	if(iB) color.b *= rand;
	if(iA) color.a *= rand;

	color *= blendColor;

	fragColor = color; //gl_FragColor
}
//@End