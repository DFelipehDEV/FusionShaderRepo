// Glitch

//@Begin_vertex
#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 textureCoordinate;

void main(void)
{
	textureCoordinate = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}
//@End
//@Begin_fragment
#ifdef GL_ES
 precision mediump float;
#endif
uniform sampler2D imgTexture;
uniform sampler2D dist_map;

varying vec2 textureCoordinate;

uniform float fPow;
uniform float fBleed;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;



void main(void)
{
    float distortion = (texture2D(dist_map, vec2(textureCoordinate.x, textureCoordinate.y)).r * 2.0 - 1.0)/fPow;
    float distortion2 = texture2D(imgTexture, vec2(textureCoordinate.x, textureCoordinate.y)).g / fBleed;

    vec4 distorted = texture2D(imgTexture, vec2(textureCoordinate.x + distortion, textureCoordinate.y)) * 8.0;

    vec4 PXT = texture2D(imgTexture, vec2(textureCoordinate.x, textureCoordinate.y - distortion2));
    vec4 PXTL = texture2D(imgTexture, vec2(textureCoordinate.x - distortion2, textureCoordinate.y - distortion2));
    vec4 PXL = texture2D(imgTexture, vec2(textureCoordinate.x - distortion2, textureCoordinate.y));
    vec4 PXBL = texture2D(imgTexture, vec2(textureCoordinate.x - distortion2, textureCoordinate.y + distortion2));
    vec4 PXB = texture2D(imgTexture, vec2(textureCoordinate.x, textureCoordinate.y + distortion2));
    vec4 PXBR = texture2D(imgTexture, vec2(textureCoordinate.x + distortion2, textureCoordinate.y + distortion2));
    vec4 PXR = texture2D(imgTexture, vec2(textureCoordinate.x + distortion2, textureCoordinate.y));
    vec4 PXTR = texture2D(imgTexture, vec2(textureCoordinate.x + distortion2, textureCoordinate.y - distortion2));


    vec4 color = (distorted + PXT + PXTL + PXL + PXBL + PXB + PXBR + PXR + PXTR) / 9.0;

	// vec4 color = texture2D(imgTexture, textureCoordinate);

    color *= blendColor;
    gl_FragColor = color;
}
//@End
