// nbTexOverlay

//@Begin_vertex
#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 textureCoordinate;

void main(void)
{
	textureCoordinate = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}
//@End
//@Begin_fragment
#ifdef GL_ES
 precision mediump float;
#endif
varying vec2 textureCoordinate;

uniform int tw;
uniform int th;
uniform float xOffset;
uniform float yOffset;
uniform float Intensity;

uniform sampler2D imgTexture;
uniform sampler2D Overlay;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

vec3 lerp(vec3 x, vec3 y, float s)
{
    return x + s*(y-x);
}

void main(void)
{
    //Get Texture scaling ratios.
    float ratioX=  2.0 / float(tw);
    float ratioY=  2.0 / float(th);

    vec2 uv = textureCoordinate;

    vec4 icolor = texture2D(imgTexture, uv);
    vec4 ocolor = vec4(0.0);
    if(icolor.a != 0.0)
    {
        ocolor = texture2D(Overlay, vec2((uv.x/ratioX + xOffset), (uv.y/ratioY + yOffset)));

        // Alpha Overlay
        float new_a = 1.0-(1.0-ocolor.a)*(1.0-icolor.a);
        ocolor.rgb = (ocolor.rgb*ocolor.a+icolor.rgb*icolor.a*(1.0-ocolor.a))/new_a;
        ocolor.rgb = lerp(icolor.rgb, ocolor.rgb, Intensity);
        ocolor.a = icolor.a;
    }
    vec4 color = ocolor;
    color *= blendColor;

    gl_FragColor = color;
}
//@End