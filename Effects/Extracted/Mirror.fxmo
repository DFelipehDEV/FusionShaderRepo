// Mirror

//@Begin_vertex
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 position;

uniform mat3 projectionMatrix;
uniform mat3 transformMatrix;
uniform mat3 objectMatrix;
uniform mat3 textureMatrix;

out vec2 textureCoordinate;

void main()
{
    vec3 pos = vec3(position, 1.0);
    textureCoordinate = (textureMatrix * pos).xy;
    gl_Position = vec4(projectionMatrix * transformMatrix * objectMatrix * pos, 1.0);
}
//@End
//@Begin_fragment
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 textureCoordinate;


uniform float fB;
uniform int iM;
uniform int iS;

uniform sampler2D imgTexture;

uniform vec4 blendColor;

out vec4 fragColor;

void main(void)
{

	vec4 color = texture(imgTexture, textureCoordinate);
	//Mirror X
    if(iM==0) {
		if(iS==0 && textureCoordinate.x > fB)
			color = texture(imgTexture, vec2(fB-(textureCoordinate.x-fB),textureCoordinate.y));
		else
			if(iS==1 && textureCoordinate.x < fB) {
				color = texture(imgTexture, vec2(fB-(textureCoordinate.x-fB),textureCoordinate.y));
			}
    }
	//Mirror Y
    if(iM==1) {
		if(iS==0 && textureCoordinate.y > fB)
			color = texture(imgTexture, vec2(textureCoordinate.x,fB-(textureCoordinate.y-fB)));
		else
			if(iS==1 && textureCoordinate.y < fB) {
				color = texture(imgTexture, vec2(textureCoordinate.x,fB-(textureCoordinate.y-fB)));
			}
    }

	color *= blendColor;


	fragColor = color; //gl_FragColor
}
//@End