// ChannelDepth

//@Begin_vertex
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 position;

uniform mat3 projectionMatrix;
uniform mat3 transformMatrix;
uniform mat3 objectMatrix;
uniform mat3 textureMatrix;

out vec2 textureCoordinate;

void main()
{
    vec3 pos = vec3(position, 1.0);
    textureCoordinate = (textureMatrix * pos).xy;
    gl_Position = vec4(projectionMatrix * transformMatrix * objectMatrix * pos, 1.0);
}
//@End
//@Begin_fragment
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 textureCoordinate;


uniform float fOffset;
uniform float fR;
uniform float fG;
uniform float fB;

uniform sampler2D imgTexture;

uniform vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

out vec4 fragColor;

void main(void)
{
	vec4 color = texture(imgTexture, textureCoordinate);
	float vfR = fR * 1.001;
	float vfG = fG * 1.001;
	float vfB = fB * 1.001;

	if(vfR>0.0)
	{
		lowp int ifR = int((color.r+fOffset)/vfR*255.0);
		color.r = float(ifR/255)*vfR;
	}
	if(vfG>0.0)
	{
		lowp int ifG = int((color.g+fOffset)/vfG*255.0);
		color.g = float(ifG/255)*vfG;
	}
	if(vfB>0.0)
	{
		lowp int ifB = int((color.b+fOffset)/vfB*255.0);
		color.b = float(ifB/255)*vfB;
	}

	color *= blendColor;


	fragColor = color; //gl_FragColor
}
//@End