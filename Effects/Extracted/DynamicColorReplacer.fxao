// DynamicColorReplacer

//@Begin_vertex
#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 textureCoordinate;

void main()
{
	textureCoordinate = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End
//@Begin_fragment
#ifdef GL_ES
 precision mediump float;
#endif
varying vec2 textureCoordinate;

#define colorAmount 24

uniform sampler2D imgTexture;

uniform lowp vec4 blendColor;

uniform vec4 from1, from2, from3, from4, from5, from6, from7, from8, from9, from10,
    from11, from12, from13, from14, from15;//, from16, from17, from18, from19, from20;
uniform vec4 to1, to2, to3, to4, to5, to6, to7, to8, to9, to10,
    to11, to12, to13, to14, to15;//, to16, to17, to18, to19, to20;

#define THRESHOLD 0.0012941176470588

bool unequal(inout vec4 test, in vec3 from, in vec3 to)
{
    if (distance(test.rgb, from) < THRESHOLD) {
        test.rgb = to;
        return false;
    }
    else {
        return true;
    }
}

void main()
{
    vec4 o = texture2D(imgTexture, textureCoordinate);

	unequal(o, from1.rgb, to1.rgb);
    unequal(o, from2.rgb, to2.rgb);
    unequal(o, from3.rgb, to3.rgb);
    unequal(o, from4.rgb, to4.rgb);
    unequal(o, from5.rgb, to5.rgb);
	unequal(o, from6.rgb, to6.rgb);
    unequal(o, from7.rgb, to7.rgb);
    unequal(o, from8.rgb, to8.rgb);
    unequal(o, from9.rgb, to9.rgb);
    unequal(o, from10.rgb, to10.rgb);
	unequal(o, from11.rgb, to11.rgb);
    unequal(o, from12.rgb, to12.rgb);
    unequal(o, from13.rgb, to13.rgb);
    unequal(o, from14.rgb, to14.rgb);
    unequal(o, from15.rgb, to15.rgb);

	o *= blendColor;
	gl_FragColor = o;
}
//@End