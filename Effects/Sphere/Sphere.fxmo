// Sphere

//@Begin_vertex
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 position;

uniform mat3 projectionMatrix;
uniform mat3 transformMatrix;
uniform mat3 objectMatrix;
uniform mat3 textureMatrix;

out vec2 textureCoordinate;

void main()
{
    vec3 pos = vec3(position, 1.0);
    textureCoordinate = (textureMatrix * pos).xy;
    gl_Position = vec4(projectionMatrix * transformMatrix * objectMatrix * pos, 1.0);
}
//@End
//@Begin_fragment
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 textureCoordinate;


uniform float fC;
uniform float fP;
uniform float fX;
uniform float fY;
uniform float fPow;

uniform sampler2D imgTexture;

uniform vec4 blendColor;

const int iRem = 0;

out vec4 fragColor;

void main(void)
{
   vec4 color;
   float vX = 1.0-fX;
   float vY = 1.0-fY;
   float dist = pow(fP,pow(sqrt(pow(vX-textureCoordinate.x,2.0)+pow(vY-textureCoordinate.y,2.0)),fPow));

   float vC = fC + (fP-1.0)*0.5; //Adjust zoom automaticly
   vC *= 1.0+(1.0-dist);
   vC = max(0.0,vC);

   vec2 tmpTex = textureCoordinate;
   tmpTex.x = tmpTex.x + vX*(vC-1.0);
   tmpTex.y = tmpTex.y + vY*(vC-1.0);
   color = texture(imgTexture, vec2(tmpTex.x/vC,tmpTex.y/vC));
   if(iRem == 1 && (tmpTex.x/vC < 0.0 || tmpTex.x/vC > 1.0 || tmpTex.y/vC < 0.0 || tmpTex.y/vC > 1.0))
		color.a = 0.0;

	color *= blendColor;


	fragColor = color; //gl_FragColor
}
//@End