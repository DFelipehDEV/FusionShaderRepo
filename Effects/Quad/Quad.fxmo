// Quad

//@Begin_vertex
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 position;

uniform mat3 projectionMatrix;
uniform mat3 transformMatrix;
uniform mat3 objectMatrix;
uniform mat3 textureMatrix;

out vec2 textureCoordinate;

void main()
{
    vec3 pos = vec3(position, 1.0);
    textureCoordinate = (textureMatrix * pos).xy;
    gl_Position = vec4(projectionMatrix * transformMatrix * objectMatrix * pos, 1.0);
}
//@End
//@Begin_fragment
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 textureCoordinate;

uniform float xA;
uniform float yA;
uniform float xB;
uniform float yB;
uniform float xC;
uniform float yC;
uniform float xD;
uniform float yD;


uniform sampler2D imgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

out vec4 fragColor;

void main(void)
{
    float vD = xD + 0.0001;
    vec4 color = vec4( 0.0 );

    float a = (xA - textureCoordinate.x) * (yB - textureCoordinate.y) - (xB - textureCoordinate.x) * (yA - textureCoordinate.y);
    float b = (xB - textureCoordinate.x) * (yC - textureCoordinate.y) - (xC - textureCoordinate.x) * (yB - textureCoordinate.y);
    float c = (xC - textureCoordinate.x) * (yD - textureCoordinate.y) - (vD - textureCoordinate.x) * (yC - textureCoordinate.y);
    float d = (vD - textureCoordinate.x) * (yA - textureCoordinate.y) - (xA - textureCoordinate.x) * (yD - textureCoordinate.y);
    if (sign(a) == sign(b) && sign(b) == sign(c) && sign(c) == sign(d))
    {
        float a1 = xA;
        float a2 = xB - xA;
        float a3 = vD - xA;
        float a4 = xA - xB + xC - vD;


        float b1 = yA;
        float b2 = yB - yA;
        float b3 = yD - yA;
        float b4 = yA - yB + yC - yD;


        float aa = a4*b3 - a3*b4;
        float bb = a4*b1 -a1*b4 + a2*b3 - a3*b2 + textureCoordinate.x*b4 - textureCoordinate.y*a4;
        float cc = a2*b1 -a1*b2 + textureCoordinate.x*b2 - textureCoordinate.y*a2;
        float det = sqrt(bb*bb - 4*aa*cc);


        float m = (-bb+det)/(2.0*aa);
        float l = (textureCoordinate.x-a1-a3*m)/(a2+a4*m);


        color = texture(imgTexture, vec2( l, m ));
    }
    color *= blendColor;

    fragColor = color; //gl_FragColor
}
//@End
