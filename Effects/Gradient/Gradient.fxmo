// Gradient

//@Begin_vertex
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 position;

uniform mat3 projectionMatrix;
uniform mat3 transformMatrix;
uniform mat3 objectMatrix;
uniform mat3 textureMatrix;

out vec2 textureCoordinate;

void main()
{
    vec3 pos = vec3(position, 1.0);
    textureCoordinate = (textureMatrix * pos).xy;
    gl_Position = vec4(projectionMatrix * transformMatrix * objectMatrix * pos, 1.0);
}
//@End
//@Begin_fragment
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 textureCoordinate;


uniform vec4 fArgb;
uniform float fAa;
uniform vec4  fBrgb;
uniform float fBa;
uniform float fCoeff;
uniform float fOffset;
uniform float fFade;

uniform int iT;
uniform int iF;
uniform int iR;
uniform int iMask;

uniform sampler2D imgTexture;

uniform vec4 blendColor;

out vec4 fragColor;

void main(void)
{

	float Ga;
	vec4 colorG;
	float temp;
	float Gx = textureCoordinate.x;
    float Gy = textureCoordinate.y;

    if(iF==1)
	{
		Gx = 1.0-Gx;
		Gy = 1.0-Gy;
    }
    if(iR==1)
	{
		temp = Gy;
		Gy = Gx;
		Gx = temp;
    }

	vec4 color = texture(imgTexture, textureCoordinate);
    //GRADIENT TYPES
    if(iT==0)
	{
		colorG = fArgb+(fBrgb-fArgb)*(Gx+fOffset)*fCoeff;
		    Ga = fAa+(fBa-fAa)*(Gx+fOffset)*fCoeff;
    }
    if(iT==1)
	{
		if(iR==1)
			temp = 1.0-Gx;
		else
			temp = Gx;
		colorG = fArgb+(fBrgb-fArgb)*(Gy*temp+fOffset)*fCoeff;
		    Ga = fAa+(fBa-fAa)*(Gy*temp+fOffset)*fCoeff;
    }
    if(iT==2)
	{
		colorG = fArgb+(fBrgb-fArgb)*abs(sin(Gx*fCoeff+fOffset));
		    Ga = fAa+(fBa-fAa)*abs(sin(Gx*fCoeff+fOffset));
    }
    if(iMask==1)
		color.a *= Ga;
    else
		color.a = Ga;

    color.rgb += (colorG.rgb-color.rgb)*fFade;

	color *= blendColor;


	fragColor = color; //gl_FragColor
}
//@End