// InnerGlow

//@Begin_vertex
#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 textureCoordinate;

void main(void)
{
	textureCoordinate = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}
//@End
//@Begin_fragment
#ifdef GL_ES
 precision mediump float;
#endif
varying vec2 textureCoordinate;

uniform float radius;
uniform float exponent;
uniform vec4 color;

uniform sampler2D imgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

vec2 offsets[12];

void main(void)
{
    offsets[0] = vec2(-0.326212, -0.305805);
    offsets[1] = vec2(-0.840144,  0.073580);
    offsets[2] = vec2(-0.695914,  0.557137);
    offsets[3] = vec2(-0.203345,  0.720716);
    offsets[4] = vec2( 0.962340, -0.094983);
    offsets[5] = vec2( 0.473434, -0.380026);
    offsets[6] = vec2( 0.519456,  0.867022);
    offsets[7] = vec2( 0.185461, -0.793124);
    offsets[8] = vec2( 0.507431,  0.164425);
    offsets[9] = vec2( 0.896420,  0.512458);
    offsets[10] = vec2(-0.321940, -0.832615);
    offsets[11] = vec2(-0.791559, -0.497705);

	vec4 fcolor = texture2D(imgTexture, textureCoordinate);
    //fcolor *= vec4(fcolor.r * fcolor.a, fcolor.g * fcolor.a, fcolor.b * fcolor.a, fcolor.a);  //Pre-multiply

    float blur = fcolor.a;
    vec2 scaled = radius/vec2(fPixelWidth, fPixelHeight);

    //Blur the alpha channel
    for(int i=0;i<12;i++)
        blur += texture2D(imgTexture,textureCoordinate+scaled*offsets[i]).a;
    blur /= 13.0;

	//Blend between glow color and foreground
   fcolor.rgb = mix(color.rgb,fcolor.rgb,pow(blur,exponent));

   fcolor *= blendColor;
   gl_FragColor = fcolor;
}
//@End