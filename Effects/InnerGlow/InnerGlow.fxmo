// InnerGlow

//@Begin_vertex
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 position;

uniform mat3 projectionMatrix;
uniform mat3 transformMatrix;
uniform mat3 objectMatrix;
uniform mat3 textureMatrix;

out vec2 textureCoordinate;

void main()
{
    vec3 pos = vec3(position, 1.0);
    textureCoordinate = (textureMatrix * pos).xy;
    gl_Position = vec4(projectionMatrix * transformMatrix * objectMatrix * pos, 1.0);
}
//@End
//@Begin_fragment
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 textureCoordinate;

uniform float radius;
uniform float exponent;
uniform vec4 color;

const vec2 offsets[] = vec2[](vec2(-0.326212, -0.305805),
                        vec2(-0.840144,  0.073580),
                        vec2(-0.695914,  0.557137),
                        vec2(-0.203345,  0.720716),
                        vec2( 0.962340, -0.094983),
                        vec2( 0.473434, -0.380026),
                        vec2( 0.519456,  0.867022),
                        vec2( 0.185461, -0.793124),
                        vec2( 0.507431,  0.164425),
                        vec2( 0.896420,  0.512458),
                        vec2(-0.321940, -0.832615),
                        vec2(-0.791559, -0.497705));

uniform sampler2D imgTexture;

uniform int inkEffect;
uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

out vec4 fragColor;

void main(void)
{
	lowp vec4 fcolor = texture(imgTexture, textureCoordinate);
    //fcolor *= vec4(fcolor.r * fcolor.a, fcolor.g * fcolor.a, fcolor.b * fcolor.a, fcolor.a);  //Pre-multiply

    float blur = fcolor.a;
    vec2 scaled = vec2(radius/fPixelWidth, radius/fPixelHeight);

    //Blur the alpha channel
    for(int i=0;i<12;i++)
        blur += texture(imgTexture, textureCoordinate+scaled*offsets[i]).a;
    blur /= 13.0;

	//Blend between glow color and foreground
   fcolor.rgb = mix(color.rgb, fcolor.rgb, pow(blur,exponent));

   fcolor *= blendColor;

   fragColor = fcolor; //gl_FragColor
}
//@End