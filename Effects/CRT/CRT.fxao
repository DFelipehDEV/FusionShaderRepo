// CRT

//@Begin_vertex
#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 textureCoordinate;

void main(void)
{
	textureCoordinate = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}
//@End
//@Begin_fragment
#ifdef GL_ES
 precision mediump float;
#endif
varying vec2 textureCoordinate;

uniform float inputW;
uniform float inputH;
uniform float outputW;
uniform float outputH;
uniform float phase;
uniform float distortion;
uniform float inputGamma;
uniform float outputGamma;

uniform sampler2D imgTexture;
uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;


#define TEX2D(c) pow(texture2D(imgTexture, (c)), vec4(inputGamma))
#define FIX(c)   max(abs(c), vec4(0.001));
#define PI 3.141592653589

vec2 rubyTextureSize;

vec2 radialDistortion(vec2 coord)
{
    coord *= rubyTextureSize/vec2(inputW,inputH);
    vec2 cc = coord - 0.5;
    float dist = dot(cc, cc) * distortion;
    return ((coord + cc * (1.0 + dist) * dist) * 1.0)/rubyTextureSize;
}

vec4 scanlineWeights(float dist, vec4 color)
{
	vec4 wid = 2.0 + 2.0 * pow(color, vec4(4.0));
	vec4 weights = vec4(dist * 3.333333);
	return (0.51 * exp(-pow(weights * sqrt(2.0 / wid), wid)) / (0.18 + 0.06 * wid));
}

void main(void)
{
	rubyTextureSize = 1.0/vec2(fPixelWidth, fPixelHeight);

	vec2 rubyInputSize = rubyTextureSize/vec2(inputW,inputH);
	vec2 rubyOutputSize = rubyTextureSize/vec2(outputW,outputH);

	vec2 one = 1.0/rubyTextureSize;

	vec2 xy = radialDistortion(textureCoordinate);

	vec2 uv_ratio = fract(xy) - 0.5;

	xy = (floor(xy*rubyTextureSize) + 0.5)/rubyTextureSize;

	vec4 coeffs = PI * vec4(1.0 + uv_ratio.x, uv_ratio.x, 1.0 - uv_ratio.x, 2.0 - uv_ratio.x);

	coeffs = FIX(coeffs);
	coeffs = 2.0 * sin(coeffs) * sin(coeffs / 2.0) / (coeffs * coeffs);

	// Normalize
	coeffs /= dot(coeffs, vec4(1.0));

	vec4 col1 = clamp(coeffs.x * TEX2D(xy + vec2(-one.x, 0.0))   + coeffs.y * TEX2D(xy) + coeffs.z * TEX2D(xy + vec2(one.x, 0.0)) + coeffs.w * TEX2D(xy + vec2(2.0 * one.x, 0.0)), vec4(0.0), vec4(1.0));
	vec4 col2 = clamp(coeffs.x * TEX2D(xy + vec2(-one.x, one.y)) + coeffs.y * TEX2D(xy + vec2(0.0, one.y)) + coeffs.z * TEX2D(xy + one) + coeffs.w * TEX2D(xy + vec2(2.0 * one.x, one.y)), vec4(0.0), vec4(1.0));

	vec4 weights1 = scanlineWeights(abs(uv_ratio.y) , col1);
	vec4 weights2 = scanlineWeights(1.0 - uv_ratio.y, col2);
	vec3 mul_res  = (col1 * weights1 + col2 * weights2).rgb;

	float mod_factor = textureCoordinate.x * rubyTextureSize.x * rubyOutputSize.x / rubyInputSize.x;

	vec3 dotMaskWeights = mix(
      	vec3(1.05, 0.75, 1.05),
      	vec3(0.75, 1.05, 0.75),
      	floor(mod(mod_factor, 2.0))
  	);

	mul_res *= dotMaskWeights;
    mul_res = pow(mul_res, vec3(1.0 / (2.0 * inputGamma - outputGamma)));

	vec4 color = vec4(mul_res, 1.0);

	color *= blendColor;

    gl_FragColor = color;
}
//@End