// ChannelDepth

//@Begin_vertex
#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 textureCoordinate;

void main(void)
{
	textureCoordinate = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}
//@End
//@Begin_fragment
#ifdef GL_ES
 precision mediump float;
#endif
varying vec2 textureCoordinate;

uniform float fOffset;
uniform float fR;
uniform float fG;
uniform float fB;

uniform sampler2D imgTexture;
uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

void main(void)
{
	vec4 color = texture2D(imgTexture, textureCoordinate);
	float vfR = fR * 1.001;
	float vfG = fG * 1.001;
	float vfB = fB * 1.001;

	if(vfR>0.0)
	{
		lowp int ifR = int((color.r+fOffset)/vfR*255.0);
		color.r = float(ifR/255)*vfR;
	}
	if(vfG>0.0)
	{
		lowp int ifG = int((color.g+fOffset)/vfG*255.0);
		color.g = float(ifG/255)*vfG;
	}
	if(vfB>0.0)
	{
		lowp int ifB = int((color.b+fOffset)/vfB*255.0);
		color.b = float(ifB/255)*vfB;
	}

	color *= blendColor;

	gl_FragColor = color;
}
//@End