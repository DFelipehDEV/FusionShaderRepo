// PixelOutline

//@Begin_vertex
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 position;

uniform mat3 projectionMatrix;
uniform mat3 transformMatrix;
uniform mat3 objectMatrix;
uniform mat3 textureMatrix;

out vec2 textureCoordinate;

void main()
{
    vec3 pos = vec3(position, 1.0);
    textureCoordinate = (textureMatrix * pos).xy;
    gl_Position = vec4(projectionMatrix * transformMatrix * objectMatrix * pos, 1.0);
}
//@End
//@Begin_fragment
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 textureCoordinate;

uniform vec4 color;

uniform sampler2D imgTexture;


uniform vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

const vec2 dirs[] = vec2[]( vec2( 1.0,  0.0),
                            vec2( 1.0,  1.0),
                            vec2( 0.0,  1.0),
                            vec2(-1.0,  1.0),
                            vec2(-1.0,  0.0),
                            vec2(-1.0, -1.0),
                            vec2( 0.0, -1.0),
                            vec2( 1.0, -1.0)
                        );

out vec4 fragColor;

void main(void)
{

	vec4 fcolor = texture(imgTexture, textureCoordinate);

 fcolor.rgb += (color.rgb-fcolor.rgb)*(1.0 - fcolor.a);

	if(fcolor.a > 0.0)
        fcolor.a = 1.0;
	else
    {
		for(int i=0;i<8;i++)
        {
			if(texture(imgTexture, textureCoordinate+dirs[i]/vec2(fPixelWidth, fPixelHeight)).a > 0.0)
				fcolor.a = 1.0;
        }
    }
    fcolor *= blendColor;

    fragColor = fcolor; //gl_FragColor
}
//@End
