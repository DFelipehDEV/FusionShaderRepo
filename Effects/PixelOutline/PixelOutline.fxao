// PixelOutline

//@Begin_vertex
#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 textureCoordinate;

void main(void)
{
	textureCoordinate = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}
//@End
//@Begin_fragment
#ifdef GL_ES
 precision mediump float;
#endif
varying vec2 textureCoordinate;

uniform vec4 color;

uniform sampler2D imgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

vec2 dirs[8];

void main(void)
{
    dirs[0] = vec2( 1.0,  0.0);
    dirs[1] = vec2( 1.0,  1.0);
    dirs[2] = vec2( 0.0,  1.0);
    dirs[3] = vec2(-1.0,  1.0);
    dirs[4] = vec2(-1.0,  0.0);
    dirs[5] = vec2(-1.0, -1.0);
    dirs[6] = vec2( 0.0, -1.0);
    dirs[7] = vec2( 1.0, -1.0);

	vec4 fcolor = texture2D(imgTexture, textureCoordinate);

    fcolor.rgb += (color.rgb-fcolor.rgb)*(1.0 - fcolor.a);

	if(fcolor.a > 0.0)
        fcolor.a = 1.0;
	else
    {
		for(int i=0;i<8;i++)
        {
			if(texture2D(imgTexture, textureCoordinate+dirs[i]/vec2(fPixelWidth, fPixelHeight)).a > 0.0)
				fcolor.a = 1.0;
        }
    }
    fcolor *= blendColor;
    gl_FragColor = fcolor;
}
//@End
