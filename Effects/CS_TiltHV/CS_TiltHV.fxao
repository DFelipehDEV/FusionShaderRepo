// CS_TiltHV

//@Begin_vertex
#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 textureCoordinate;

void main(void)
{
	textureCoordinate = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}
//@End
//@Begin_fragment
#ifdef GL_ES
 precision mediump float;
#endif
varying vec2 textureCoordinate;

uniform float fTH;
uniform float fTV;

uniform sampler2D imgTexture;
uniform lowp vec4 blendColor;

void main(void)
{
	vec4 color;
	float fCoeffH = 1.0-abs(fTH);
	float fCoeffV = 1.0-abs(fTV);

	if(fTH>=0.0 && fTV>=0.0)
	{
		color = texture2D(imgTexture, vec2((textureCoordinate.x-textureCoordinate.y*fTH)/fCoeffH,(textureCoordinate.y-textureCoordinate.x*fTV)/fCoeffV));
	}
	else if(fTH>=0.0)
	{
		color = texture2D(imgTexture, vec2((textureCoordinate.x-textureCoordinate.y*fTH)/fCoeffH,(textureCoordinate.y-textureCoordinate.x*fTV)/fCoeffV+fTV));
	}
	else if(fTV>=0.0)
	{
		color = texture2D(imgTexture, vec2((textureCoordinate.x-textureCoordinate.y*fTH)/fCoeffH+fTH,(textureCoordinate.y-textureCoordinate.x*fTV)/fCoeffV));
	}
	else
	{
		color = texture2D(imgTexture, vec2((textureCoordinate.x-textureCoordinate.y*fTH)/fCoeffH+fTH,(textureCoordinate.y-textureCoordinate.x*fTV)/fCoeffV+fTV));
	}

	color *= blendColor;

	gl_FragColor = color;
}
//@End