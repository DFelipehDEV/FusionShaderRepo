// CS_TiltHV

//@Begin_vertex
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 position;

uniform mat3 projectionMatrix;
uniform mat3 transformMatrix;
uniform mat3 objectMatrix;
uniform mat3 textureMatrix;

out vec2 textureCoordinate;

void main()
{
    vec3 pos = vec3(position, 1.0);
    textureCoordinate = (textureMatrix * pos).xy;
    gl_Position = vec4(projectionMatrix * transformMatrix * objectMatrix * pos, 1.0);
}
//@End
//@Begin_fragment
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 textureCoordinate;


uniform float fTH;
uniform float fTV;

uniform sampler2D imgTexture;

uniform lowp vec4 blendColor;

out vec4 fragColor;

void main(void)
{
	vec4 color;
	float fCoeffH = 1.0-abs(fTH);
	float fCoeffV = 1.0-abs(fTV);

	if(fTH>=0.0 && fTV>=0.0)
	{
		color = texture(imgTexture, vec2((textureCoordinate.x-textureCoordinate.y*fTH)/fCoeffH,(textureCoordinate.y-textureCoordinate.x*fTV)/fCoeffV));
	}
	else if(fTH>=0.0)
	{
		color = texture(imgTexture, vec2((textureCoordinate.x-textureCoordinate.y*fTH)/fCoeffH,(textureCoordinate.y-textureCoordinate.x*fTV)/fCoeffV+fTV));
	}
	else if(fTV>=0.0)
	{
		color = texture(imgTexture, vec2((textureCoordinate.x-textureCoordinate.y*fTH)/fCoeffH+fTH,(textureCoordinate.y-textureCoordinate.x*fTV)/fCoeffV));
	}
	else
	{
		color = texture(imgTexture, vec2((textureCoordinate.x-textureCoordinate.y*fTH)/fCoeffH+fTH,(textureCoordinate.y-textureCoordinate.x*fTV)/fCoeffV+fTV));
	}

	color *= blendColor;


	fragColor = color; //gl_FragColor
}
//@End