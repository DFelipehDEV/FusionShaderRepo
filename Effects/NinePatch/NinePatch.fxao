// NinePatch

//@Begin_vertex
#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 textureCoordinate;

void main(void)
{
	textureCoordinate = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}
//@End
//@Begin_fragment
#ifdef GL_ES
 precision mediump float;
#endif
varying vec2 textureCoordinate;

uniform sampler2D imgTexture;
uniform lowp vec4 blendColor;

uniform float xScale;
uniform float yScale;

uniform float fPixelWidth;
uniform float fPixelHeight;

void main(void)
{
    vec4 Color = texture2D(imgTexture, vec2(0.5,0.5));
    float OrigWidth  = fPixelWidth  / xScale;
    float OrigHeight = fPixelHeight / yScale;
    float ChunkWidth  = OrigWidth  / 3.0;
    float ChunkHeight = OrigHeight / 3.0;
    float Width  = fPixelWidth;
    float Height = fPixelHeight;

    vec2 Pos; 
    Pos.x = textureCoordinate.x * Width;
    Pos.y = textureCoordinate.y * Height;

    vec2 OrigPos; 
    OrigPos.x = textureCoordinate.x * xScale;
    OrigPos.y = textureCoordinate.y * yScale;


    if(Pos.x> ChunkWidth && Pos.x< Width-ChunkWidth && Pos.y < ChunkHeight  ) {   //Top
        vec2 Chunk;
        Chunk.x = Pos.x - (Width-ChunkWidth);
        Chunk.y = Pos.y - (Height-ChunkHeight);
        Color = texture2D(imgTexture, vec2( (textureCoordinate.x+1.0)/3.0, OrigPos.y));
    }

    if(Pos.x> ChunkWidth && Pos.x< Width-ChunkWidth && Pos.y > Height-ChunkHeight  ) {   //Bottom
        vec2 Chunk;
        Chunk.x = Pos.x - (Width-ChunkWidth);
        Chunk.y = Pos.y - (Height-ChunkHeight);
        Color = texture2D(imgTexture, vec2( (textureCoordinate.x+1.0)/3.0, (OrigHeight-ChunkHeight + Chunk.y)/Height * yScale));
    }

    if(Pos.x< ChunkWidth && Pos.y> ChunkHeight && Pos.y < Height-ChunkHeight  ) {   //Left

        Color = texture2D(imgTexture, vec2( OrigPos.x,  (textureCoordinate.y+1.0)/3.0    ));
    }

    if(Pos.y> ChunkHeight && Pos.x> Width-ChunkWidth && Pos.y < Height-ChunkHeight  ) {   //Right
        vec2 Chunk;
        Chunk.x = Pos.x - (Width-ChunkWidth);
        Chunk.y = Pos.y - (Height-ChunkHeight);
        Color = texture2D(imgTexture, vec2((OrigWidth-ChunkWidth + Chunk.x)/Width * xScale, (textureCoordinate.y+1.0)/3.0));
    }


    if(Pos.x> ChunkWidth && Pos.x< Width-ChunkWidth 
     && Pos.y > ChunkHeight && Pos.y < Height- ChunkHeight  ) {                           //Center
        Color = texture2D(imgTexture, vec2(  ((textureCoordinate.x+1.0)/3.0), ((textureCoordinate.y+1.0)/3.0)      ));
    }


//////////////////

    if(Pos.x < ChunkWidth  && Pos.y < ChunkHeight  ) {   //Upper Left
        Color = texture2D(imgTexture, OrigPos.xy);
    }

    if(Pos.x> Width-ChunkWidth  && Pos.y < ChunkHeight  ) {   //Upper Right
        vec2 Chunk;
        Chunk.x = Pos.x - (Width-ChunkWidth);
        Chunk.y = Pos.y - (Height-ChunkHeight);
        Color = texture2D(imgTexture, vec2((OrigWidth - ChunkWidth + Chunk.x)/Width * xScale, OrigPos.y));
    }

    if(Pos.x< ChunkWidth  && Pos.y > Width-ChunkHeight  ) {   //Lower Left
        vec2 Chunk;
        Chunk.x = Pos.x - (Width-ChunkWidth);
        Chunk.y = Pos.y - (Height-ChunkHeight);
        Color = texture2D(imgTexture, vec2(OrigPos.x, (OrigHeight-ChunkHeight + Chunk.y)/Height * yScale));
    }


    if(Pos.x> Width-ChunkWidth  && Pos.y > Width-ChunkHeight  ) {   //Lower Right
        vec2 Chunk;
        Chunk.x = Pos.x - (Width-ChunkWidth);
        Chunk.y = Pos.y - (Height-ChunkHeight);
        Color = texture2D(imgTexture, vec2((OrigWidth - ChunkWidth + Chunk.x)/Width * xScale, (OrigHeight-ChunkHeight + Chunk.y)/Height * yScale));
    }

	Color *= blendColor;

	gl_FragColor = Color;
}
//@End