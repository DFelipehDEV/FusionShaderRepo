// ColorReplacer

//@Begin_vertex
#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 textureCoordinate;

void main(void)
{
	textureCoordinate = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}
//@End
//@Begin_fragment
#ifdef GL_ES
 precision mediump float;
#endif
varying vec2 textureCoordinate;

uniform vec4 R;
uniform vec4 G;
uniform vec4 B;
uniform vec4 C;
uniform vec4 M;
uniform vec4 Y;
uniform vec4 T;
uniform vec4 P;
uniform vec4 O;

const float HALF = 128.0/255.0;

uniform sampler2D imgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

void main(void)
{
   vec4 color = texture2D(imgTexture, textureCoordinate);

	if(color.r == 1.0)
	{
		if(color.g == 1.0)
		{
			if(color.b == 0.0)
				color.rgb = Y.rgb;
		}
		else if(color.g == 0.0)
		{
			if(color.b == 1.0)
				color.rgb = M.rgb;
			else if(color.b == 0.0)
				color.rgb = R.rgb;
		}
	}
	else if(color.r == 0.0)
	{
		if(color.g == 1.0)
		{
			if(color.b == 1.0)
				color.rgb = C.rgb;
			else if(color.b == 0.0)
				color.rgb = G.rgb;
		}
		else if(color.g == 0.0)
		{
			if(color.b == 1.0)
				color.rgb = B.rgb;
		}
		else if(color.g == HALF && color.b == HALF)
		{
			color.rgb = T.rgb;
		}
	}
	else if(color.r == HALF)
	{
		if(color.g == 0.0 && color.b == HALF)
		{
			color.rgb = P.rgb;
		}
		else if(color.g == HALF && color.b == 0.0)
		{
			color.rgb = color.rgb;
		}
	}

	color.rgb *= color.a;

    color *= blendColor;
	gl_FragColor = color;
}
//@End