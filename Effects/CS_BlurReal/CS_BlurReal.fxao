// CS_BlurReal

//@Begin_vertex
#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 textureCoordinate;

void main(void)
{
	textureCoordinate = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}
//@End
//@Begin_fragment
#ifdef GL_ES
 precision mediump float;
#endif
varying vec2 textureCoordinate;

uniform float fCoeff;
uniform int nSteps;

uniform sampler2D imgTexture;
uniform lowp vec4 blendColor;

void main(void)
{
	vec4 color;
	int i;
	float fCoeffCurrent=fCoeff;

	if(nSteps>0)
	{
		color.rgba=vec4(0.0,0.0,0.0,0.0);

		for(i=0;i<nSteps;i++)
		{
			vec4 TexT = texture2D(imgTexture, vec2(textureCoordinate.x,textureCoordinate.y-fCoeffCurrent));
			vec4 TexTL = texture2D(imgTexture, vec2(textureCoordinate.x-fCoeff,textureCoordinate.y-fCoeff));
			vec4 TexL = texture2D(imgTexture, vec2(textureCoordinate.x-fCoeffCurrent,textureCoordinate.y));
			vec4 TexBL = texture2D(imgTexture, vec2(textureCoordinate.x-fCoeff,textureCoordinate.y+fCoeff));
			vec4 TexB = texture2D(imgTexture, vec2(textureCoordinate.x,textureCoordinate.y+fCoeffCurrent));
			vec4 TexBR = texture2D(imgTexture, vec2(textureCoordinate.x+fCoeff,textureCoordinate.y+fCoeff));
			vec4 TexR = texture2D(imgTexture, vec2(textureCoordinate.x+fCoeffCurrent,textureCoordinate.y));
			vec4 TexTR = texture2D(imgTexture, vec2(textureCoordinate.x+fCoeff,textureCoordinate.y-fCoeff));
			vec4 TexF = texture2D(imgTexture, textureCoordinate);

			color = color+(TexF+TexT+TexTL+TexL+TexBL+TexB+TexBR+TexR+TexTR)/(9.0*nSteps);

			fCoeffCurrent=fCoeffCurrent+fCoeff;
		}
	}
	else
	{
		color = texture2D(imgTexture, textureCoordinate);
	}

	color *= blendColor;

	gl_FragColor = color;
}
//@End