// Outline

//@Begin_vertex
#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 textureCoordinate;

void main(void)
{
	textureCoordinate = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}
//@End
//@Begin_fragment
#ifdef GL_ES
 precision mediump float;
#endif
varying vec2 textureCoordinate;

uniform vec4 fColour;
uniform float fWidth;
uniform float fHeight;

uniform sampler2D imgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

vec2 samples[8];

void main(void)
{
    samples[0] = vec2(-1.0,-1.0);
    samples[1] = vec2( 0.0,-1.0);
    samples[2] = vec2( 1.0,-1.0);
    samples[3] = vec2(-1.0, 0.0);
    samples[4] = vec2(-1.0, 0.0);
    samples[5] = vec2(-1.0, 1.0);
    samples[6] = vec2( 0.0, 1.0);
    samples[7] = vec2( 1.0, 1.0);

	vec4 color = texture2D(imgTexture, textureCoordinate);

    if ( color.a < 0.5 )
    {
        for(int i=0; i<8; i++)
        {
            if ( texture2D(imgTexture, textureCoordinate + samples[i]/vec2(fPixelWidth, fPixelHeight)).a >= 0.5 )
            {
                color = vec4(fColour.rgb, 1.0);
            }
        }
    }
    color *= blendColor;
    gl_FragColor = color;
}
//@End
