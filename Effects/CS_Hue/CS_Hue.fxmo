// CS_Hue

//@Begin_vertex
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 position;

uniform mat3 projectionMatrix;
uniform mat3 transformMatrix;
uniform mat3 objectMatrix;
uniform mat3 textureMatrix;

out vec2 textureCoordinate;

void main()
{
    vec3 pos = vec3(position, 1.0);
    textureCoordinate = (textureMatrix * pos).xy;
    gl_Position = vec4(projectionMatrix * transformMatrix * objectMatrix * pos, 1.0);
}
//@End
//@Begin_fragment
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 textureCoordinate;


uniform lowp vec4 blendColor;
uniform float fHue;

uniform sampler2D imgTexture;

uniform lowp vec4 blendColor;

out vec4 fragColor;

void main(void)
{
	vec4 color;
   	vec4 init = texture(imgTexture, textureCoordinate);

	color.a = init.a;

	if(fHue < 1.0)
	{
		color.r = init.r + (init.g - init.r)*fHue;
		color.g = init.g + (init.b - init.g)*fHue;
		color.b = init.b + (init.r - init.b)*fHue;
	}
	else if(fHue < 2.0)
	{
		color.r = init.g + (init.b - init.g)*(fHue - 1.0);
		color.g = init.b + (init.r - init.b)*(fHue - 1.0);
		color.b = init.r + (init.g - init.r)*(fHue - 1.0);
	}
	else
	{
		color.r = init.b + (init.r - init.b)*(fHue - 2.0);
		color.g = init.r + (init.g - init.r)*(fHue - 2.0);
		color.b = init.g + (init.b - init.g)*(fHue - 2.0);
	}

	color *= blendColor;

	fragColor = color; //gl_FragColor
}
//@End