// CS_Hue

//@Begin_vertex
#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 textureCoordinate;

void main(void)
{
	textureCoordinate = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End
//@Begin_fragment
#ifdef GL_ES
 precision mediump float;
#endif
varying vec2 textureCoordinate;

uniform float fHue;

uniform sampler2D imgTexture;
uniform lowp vec4 blendColor;

void main(void)
{
	vec4 color;
   	vec4 init = texture2D(imgTexture, textureCoordinate);

	color.a = init.a;

	if(fHue < 1.0)
	{
		color.r = init.r + (init.g - init.r)*fHue;
		color.g = init.g + (init.b - init.g)*fHue;
		color.b = init.b + (init.r - init.b)*fHue;
	}
	else if(fHue < 2.0)
	{
		color.r = init.g + (init.b - init.g)*(fHue - 1.0);
		color.g = init.b + (init.r - init.b)*(fHue - 1.0);
		color.b = init.r + (init.g - init.r)*(fHue - 1.0);
	}
	else
	{
		color.r = init.b + (init.r - init.b)*(fHue - 2.0);
		color.g = init.r + (init.g - init.r)*(fHue - 2.0);
		color.b = init.g + (init.b - init.g)*(fHue - 2.0);
	}

	color *= blendColor;
	gl_FragColor = color;
}
//@End