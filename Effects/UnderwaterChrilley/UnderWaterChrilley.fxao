// UnderWater

//@Begin_vertex
#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 textureCoordinate;

void main(void)
{
	textureCoordinate = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}
//@End
//@Begin_fragment
#ifdef GL_ES
 precision mediump float;
#endif
varying vec2 textureCoordinate;

uniform float fAmplitude;
uniform float fFrequency;
uniform float fPeriods;
uniform float fDistortStr;
uniform float fWaveFrequency;
uniform float fWaveAmplitude;
uniform float fWavePeriods;
uniform bool waveEnabled;
uniform vec4 fColor;

uniform sampler2D bkd;
uniform sampler2D distort;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

void main(void)
{
    vec4 color = texture2D(bkd, vec2( textureCoordinate.x,textureCoordinate.y));

    vec4 distortColor = texture2D(distort, vec2( textureCoordinate.x,textureCoordinate.y));

    vec2 offset = vec2(fFrequency*fPixelWidth, fFrequency*fPixelHeight);
    offset.x = distortColor.r*fDistortStr;
    offset.y = distortColor.g*fDistortStr;

    color =  texture2D(bkd, vec2(textureCoordinate.x+ (sin((textureCoordinate.x+fFrequency)*fPeriods)*fAmplitude)+offset.x,textureCoordinate.y+ (sin((textureCoordinate.x+fFrequency)*fPeriods)*fAmplitude)+offset.y));

    color += fColor;

    if(waveEnabled)
    {
        color.a = smoothstep(0.01,0.03, textureCoordinate.y+(sin((textureCoordinate.x+fWaveFrequency*fPixelHeight)*fWavePeriods)*fWaveAmplitude)+offset);
    }

	color *= blendColor;

    gl_FragColor = color;
}
//@End