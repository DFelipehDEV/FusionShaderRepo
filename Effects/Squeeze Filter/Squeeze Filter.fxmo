// Squeeze Filter

//@Begin_vertex
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 position;

uniform mat3 projectionMatrix;
uniform mat3 transformMatrix;
uniform mat3 objectMatrix;
uniform mat3 textureMatrix;

out vec2 textureCoordinate;

void main()
{
    vec3 pos = vec3(position, 1.0);
    textureCoordinate = (textureMatrix * pos).xy;
    gl_Position = vec4(projectionMatrix * transformMatrix * objectMatrix * pos, 1.0);
}
//@End
//@Begin_fragment
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 textureCoordinate;


uniform float fAngle;
uniform float fCoeff;

uniform sampler2D imgTexture;

uniform vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

out vec4 fragColor;

void main(void)
{
	vec2 inTexture = textureCoordinate;
	float Dist = distance(textureCoordinate, vec2(0.5,0.5)) * 2.0;

	if (Dist < 1.0){
		float Angle = atan2(textureCoordinate.y - 0.5, textureCoordinate.x - 0.5) + pow(1.0 - Dist,2.0) * fAngle;
		Dist = (pow(Dist,fCoeff)) / 2.0;
		inTexture.x = cos(Angle) * Dist + 0.5;
		inTexture.y = sin(Angle) * Dist + 0.5;
	}

   	vec4 color = texture(imgTexture, inTexture);
	color *= blendColor;


	fragColor = color; //gl_FragColor
}
//@End