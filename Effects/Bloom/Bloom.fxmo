// Bloom

//@Begin_vertex
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 position;

uniform mat3 projectionMatrix;
uniform mat3 transformMatrix;
uniform mat3 objectMatrix;
uniform mat3 textureMatrix;

out vec2 textureCoordinate;

void main()
{
    vec3 pos = vec3(position, 1.0);
    textureCoordinate = (textureMatrix * pos).xy;
    gl_Position = vec4(projectionMatrix * transformMatrix * objectMatrix * pos, 1.0);
}
//@End
//@Begin_fragment
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 textureCoordinate;

uniform float radius;
uniform float exponent;
uniform float coeff;

const vec2 offsets[] = vec2[](	vec2(-0.326212, -0.405805),
                                vec2(-0.840144, -0.073580),
                                vec2(-0.695914,  0.457137),
                                vec2(-0.203345,  0.620716),
                                vec2( 0.962340, -0.194983),
                                vec2( 0.473434, -0.480026),
                                vec2( 0.519456,  0.767022),
                                vec2( 0.185461, -0.893124),
                                vec2( 0.507431,  0.064425),
                                vec2( 0.896420,  0.412458),
                                vec2(-0.321940, -0.932615),
                                vec2(-0.791559, -0.597705));

uniform sampler2D imgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;


vec4 highlight(vec4 i)
{
    return pow(i,vec4(exponent))*coeff;
}
out vec4 fragColor;

void main(void)
{
	vec4 color = texture(imgTexture, textureCoordinate);
    vec4 glow  = highlight(color);

	vec2 scaled = radius/vec2(fPixelWidth, fPixelHeight);

	for(int i=0;i<12;i++)
	     glow += highlight(texture(imgTexture,textureCoordinate+scaled*offsets[i]));
	glow /= 13.0;

	color += highlight(glow);

    color *= blendColor;
    fragColor = color; //fragColor = color;
}
//@End