// PixelPalette_Multi

//@Begin_vertex
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 position;

uniform mat3 projectionMatrix;
uniform mat3 transformMatrix;
uniform mat3 objectMatrix;
uniform mat3 textureMatrix;

out vec2 textureCoordinate;

void main()
{
    vec3 pos = vec3(position, 1.0);
    textureCoordinate = (textureMatrix * pos).xy;
    gl_Position = vec4(projectionMatrix * transformMatrix * objectMatrix * pos, 1.0);
}
//@End
//@Begin_fragment
//version_####
#ifdef GL_ES
 precision mediump float;
#endif
in vec2 textureCoordinate;

uniform sampler2D imgTexture;
uniform sampler2D Palettes;

uniform int nPal;
uniform int lerpA;
uniform int lerpB;
uniform float lerpVal;

uniform vec4 blendColor;

int isOdd(int n)
{
  return (((n / 2) * 2) == n) ? 0 : 1;
}

out vec4 fragColor;

void main(void)
{
   	vec4 color = texture(imgTexture, textureCoordinate);
  	float index  = color.r;
	
	int odd = isOdd(nPal);
	vec4 colorA = texture(Palettes, vec2(index, float(lerpA + odd) / float(nPal)));
	vec4 colorB = texture(Palettes, vec2(index, float(lerpB + odd) / float(nPal)));
	color.rgb = mix(colorA.rgb, colorB.rgb, lerpVal);

	color *= blendColor;
	fragColor = color; //gl_FragColor
}
//@End