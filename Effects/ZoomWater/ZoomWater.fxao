// ZoomWater

//@Begin_vertex
#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 textureCoordinate;

void main(void)
{
	textureCoordinate = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}
//@End
//@Begin_fragment
#ifdef GL_ES
 precision mediump float;
#endif
varying vec2 textureCoordinate;

uniform float fBlur;
uniform float fAmplitudeX;
uniform float fPeriodsX;
uniform float fFreqX;
uniform float fAmplitudeY;
uniform float fPeriodsY;
uniform float fFreqY;

uniform sampler2D imgTexture;
uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

void main(void)
{
    vec2 inputCoord = textureCoordinate;
    vec4 color;

    //SinX
	inputCoord.y = (textureCoordinate.y-0.5)*2.0+0.5 + (sin((textureCoordinate.x+fFreqX)*fPeriodsX)*fAmplitudeX);
	//SinY
	inputCoord.x = (textureCoordinate.x-0.5)*2.0+0.5 + (sin((textureCoordinate.y+fFreqY)*fPeriodsY)*fAmplitudeY);

    // Output pixel
	if (abs(inputCoord.x - 0.5) >= 0.5 || abs(inputCoord.y - 0.5) >= 0.5)
    {
        color = vec4(0.0);
	}
    else
    {
        vec4 TexTL = texture2D(imgTexture, vec2(inputCoord.x-fBlur,inputCoord.y-fBlur));
        vec4 TexBL = texture2D(imgTexture, vec2(inputCoord.x-fBlur,inputCoord.y+fBlur));
        vec4 TexBR = texture2D(imgTexture, vec2(inputCoord.x+fBlur,inputCoord.y+fBlur));
        vec4 TexTR = texture2D(imgTexture, vec2(inputCoord.x+fBlur,inputCoord.y-fBlur));
        color = texture2D(imgTexture, inputCoord);
        color = (color+TexTL+TexBL+TexBR+TexTR)/5.0;
    }
	color *= blendColor;

    gl_FragColor = color;
}
//@End